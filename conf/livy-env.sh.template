#!/usr/bin/env bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# LIVY ENVIRONMENT VARIABLES
#
# - JAVA_HOME       Java runtime to use. By default use "java" from PATH.
# - HADOOP_CONF_DIR Directory containing the Hadoop / YARN configuration to use.
# - SPARK_HOME      Spark which you would like to use in Livy.
# - SPARK_CONF_DIR  Optional directory where the Spark configuration lives.
#                   (Default: $SPARK_HOME/conf)
# - LIVY_LOG_DIR    Where log files are stored. (Default: ${LIVY_HOME}/logs)
# - LIVY_PID_DIR    Where the pid file is stored. (Default: /tmp)
# - LIVY_SERVER_JAVA_OPTS  Java Opts for running livy server (You can set jvm related setting here,
#                          like jvm memory/gc algorithm and etc.)
# - LIVY_IDENT_STRING A name that identifies the Livy server instance, used to generate log file
#                     names. (Default: name of the user starting Livy).
# - LIVY_MAX_LOG_FILES Max number of log file to keep in the log directory. (Default: 5.)
# - LIVY_NICENESS   Niceness of the Livy server process when running in the background. (Default: 0.)
# - LIVY_CLASSPATH  Override if the additional classpath is required.

MAPR_HOME=${MAPR_HOME:-"/opt/mapr"}
. "${MAPR_HOME}/conf/env.sh"

export LIVY_SERVER_JAVA_OPTS="${MAPR_ECOSYSTEM_SERVER_LOGIN_OPTS} -Djava.library.path=${MAPR_HOME}/lib"
export LIVY_SERVER_JAVA_OPTS="${LIVY_SERVER_JAVA_OPTS} --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED"

export HADOOP_VERSION=$(cat "${MAPR_HOME}/hadoop/hadoopversion")
export HADOOP_HOME="${MAPR_HOME}/hadoop/hadoop-${HADOOP_VERSION}"
export HADOOP_CONF_DIR="${HADOOP_HOME}/etc/hadoop"

export SPARK_VERSION=$(cat "${MAPR_HOME}/spark/sparkversion")
export SPARK_HOME="${MAPR_HOME}/spark/spark-${SPARK_VERSION}"

py4j_file=$(find "${SPARK_HOME}/python/lib/" -maxdepth 1 -type f -name 'py4j-*-src.zip' | sort --version-sort | tail -n 1)
export PYTHONPATH="${py4j_file}:${SPARK_HOME}/python/:${PYTHONPATH}"

export CLASSPATH="$(mapr classpath):$(hadoop classpath):${SPARK_HOME}/jars/*"

get_fips_mode=$(sysctl crypto.fips_enabled 2> /dev/null)
fips_enabled='crypto.fips_enabled = 1'
if [ "$get_fips_mode" = "$fips_enabled" ]; then
  is_fips="true"
fi
if [ "$is_fips" = "true" ]; then
    export LIVY_SERVER_JAVA_OPTS="$MAPR_ALTERNATE_JAVA_SECURITY $LIVY_SERVER_JAVA_OPTS"
fi
